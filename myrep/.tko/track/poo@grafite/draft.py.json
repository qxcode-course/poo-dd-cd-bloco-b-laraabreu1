{
    "patches": [
        {
            "label": "2025-10-27_23-20-24",
            "content": "@@ -1,2141 +0,0 @@\n-class Grafite:%0A    def __init__(self, thickness = float, hardness = str, size = int):%0A        self.__thickness: float = thickness%0A        self.__hardness: str = hardness%0A        self.__size: int = 0%0A%0A    def usagePersheet(self, hardness: str) -%3E int:%0A        if self.__hardness == %22HB%22:%0A            return 1%0A        if self.__hardness == %222B%22:%0A            return 2%0A        if self.__hardness == %224B%22:%0A            return 4%0A        if self.__hardness == %226B%22:%0A            return 6%0A        %0A    def get_thickness(self) -%3E str:%0A        return self.__thickness%0A    %0A    def get_hardness(self) -%3E str:%0A        return self.__hardness%0A    %0A    def set_size(self, tamanho: int):%0A        self.__size = tamanho%0A%0A    def __str__(self) -%3E str:%0A        return f%22%5B%7Bself.__thickness%7D:%7Bself.__hardness%7D:%7Bself.__size%7Dmm%5D%22%0A    %0Aclass Pencil:%0A    def __init__(self, thickness = float, tip = Grafite %7C None):%0A        self.__thickness: float = thickness%0A        self.__tip: Grafite %7C None%0A%0A    def get_tip(self) -%3E str:%0A        return self.__tip%0A    %0A    def get_thickness(self) -%3E str:%0A        return self.__thickness%0A    %0A    def hasGrafite(self) -%3E bool:%0A        if self.__tip != None:%0A            return True%0A        else:%0A            return False%0A        %0A    def insert(self, tip = Grafite):%0A        if self.__tip is not None:%0A            print(%22fail: ja existe grafite%22)%0A            return%0A        if self.get_thickness() != self.__thickness:%0A            print(%22fail: calibre incompativel%22)%0A            return%0A        self.__tip = tip%0A%0A    def remove(self, tip = Grafite) -%3E Grafite %7C None:%0A        if self.__tip is None:%0A            print(f%22fail: nao existe grafite%22)%0A            return None%0A        aux = self.__tip%0A        self.__tip = None%0A        return aux%0A    %0A    def __str__(self):%0A        return f%22calibre:%7Bself.__thickness%7D, grafite:%7B%22null%22 if self.__tip is None else self.__tip%7D%22%0A    %0A%0Adef main():%0A    grafite = Pencil()%0A    while True:%0A        line: str = input()%0A        print(%22$%22 + line)%0A        args: list%5Bstr%5D = line.split(%22 %22)%0A        if args%5B0%5D == %22end%22:%0A            break%0A        if args%5B0%5D == %22show%22:%0A            print(grafite)%0A%0Amain()\n",
            "lines": "0"
        },
        {
            "label": "2025-10-28_00-41-35",
            "content": "@@ -852,25 +852,23 @@\n ness\n-:\n+ =\n  float\n- = 0\n , tip\n-:\n+ =\n  Gra\n@@ -877,15 +877,8 @@\n te %7C\n- None =\n  Non\n@@ -905,16 +905,23 @@\n hickness\n+: float\n  = thick\n@@ -935,38 +935,48 @@\n       self.__tip\n- = tip\n+: Grafite %7C None\n %0A%0A    def get_ti\n@@ -982,38 +982,27 @@\n ip(self) -%3E \n-Grafite %7C None\n+str\n :%0A        re\n@@ -1013,24 +1013,28 @@\n  self.__tip%0A\n+    \n %0A    def get\n@@ -1053,21 +1053,19 @@\n elf) -%3E \n-float\n+str\n :%0A      \n@@ -1090,16 +1090,20 @@\n ickness%0A\n+    \n %0A    def\n@@ -1110,10 +1110,9 @@\n  has\n-_g\n+G\n rafi\n@@ -1129,38 +1129,34 @@\n %3E bool:%0A        \n-return\n+if\n  self.__tip is n\n@@ -1155,20 +1155,88 @@\n tip \n-is not None%0A\n+!= None:%0A            return True%0A        else:%0A            return False%0A        \n %0A   \n@@ -1256,17 +1256,18 @@\n elf, tip\n-:\n+ =\n  Grafite\n@@ -1379,19 +1379,20 @@\n      if \n-tip\n+self\n .get_thi\n@@ -1529,24 +1529,39 @@\n  remove(self\n+, tip = Grafite\n ) -%3E Grafite\n@@ -1614,24 +1614,25 @@\n       print(\n+f\n %22fail: nao e\n@@ -1741,16 +1741,20 @@\n urn aux%0A\n+    \n %0A    def\n@@ -1759,39 +1759,32 @@\n ef __str__(self)\n- -%3E str\n :%0A        return\n@@ -1823,16 +1823,26 @@\n rafite:%7B\n+%22null%22 if \n self.__t\n@@ -1849,35 +1849,37 @@\n ip i\n-f self.__tip else 'null'%7D%22%0A\n+s None else self.__tip%7D%22%0A    \n %0A%0Ade\n@@ -1888,30 +1888,31 @@\n main():%0A    \n-pencil\n+grafite\n  = Pencil()%0A\n@@ -1911,17 +1911,16 @@\n encil()%0A\n-%0A\n     whil\n@@ -1939,16 +1939,21 @@\n     line\n+: str\n  = input\n@@ -1993,16 +1993,27 @@\n     args\n+: list%5Bstr%5D\n  = line.\n@@ -2018,18 +2018,20 @@\n e.split(\n+%22 %22\n )\n-%0A\n %0A       \n@@ -2070,25 +2070,24 @@\n   break%0A\n-%0A\n         \n elif arg\n@@ -2070,34 +2070,32 @@\n   break%0A        \n-el\n if args%5B0%5D == %22s\n@@ -2122,500 +2122,15 @@\n int(\n-pencil)%0A%0A        elif args%5B0%5D == %22init%22:%0A            # Ex.: init 0.5%0A            pencil = Pencil(float(args%5B1%5D))%0A%0A        elif args%5B0%5D == %22insert%22:%0A            # Ex.: insert 0.5 HB 50%0A            thickness = float(args%5B1%5D)%0A            hardness = args%5B2%5D%0A            size = int(args%5B3%5D)%0A            grafite = Grafite(thickness, hardness, size)%0A            pencil.insert(grafite)%0A%0A        elif args%5B0%5D == %22remove%22:%0A            pencil.remove()%0A%0A        else:%0A            print(%22comando invalido%22\n+grafite\n )%0A%0Am\n",
            "lines": "78"
        },
        {
            "label": "2025-10-28_01-18-50",
            "content": "@@ -1713,17 +1713,16 @@\n calibre:\n- \n %7Bself.__\n@@ -1741,17 +1741,16 @@\n grafite:\n- \n %7Bself.__\n",
            "lines": "96"
        },
        {
            "label": "2025-10-28_01-19-16",
            "content": "@@ -190,20 +190,17 @@\n : int = \n-size\n+0\n %0A%0A    de\n",
            "lines": "96"
        },
        {
            "label": "2025-10-28_01-36-55",
            "content": "@@ -795,16 +795,18 @@\n .__size%7D\n+mm\n %5D%22%0A    %0A\n",
            "lines": "96"
        },
        {
            "label": "2025-10-28_01-37-33",
            "content": "@@ -2492,32 +2492,24 @@\n nt(%22\n-fail: nao existe grafite\n+comando invalido\n %22)%0A%0A\n",
            "lines": "96"
        },
        {
            "label": "2025-10-28_01-38-10",
            "content": "@@ -479,25 +479,8 @@\n n 6%0A\n-        return 0%0A\n     \n@@ -2050,24 +2050,52 @@\n  == %22init%22:%0A\n+            # Ex.: init 0.5%0A\n             \n@@ -2157,24 +2157,60 @@\n = %22insert%22:%0A\n+            # Ex.: insert 0.5 HB 50%0A\n             \n",
            "lines": "96"
        },
        {
            "label": "2025-10-28_01-44-04",
            "content": "@@ -718,137 +718,8 @@\n ho%0A%0A\n-    def decrease_size(self, amount: int):%0A        self.__size -= amount%0A        if self.__size %3C 0:%0A            self.__size = 0%0A%0A\n     \n",
            "lines": "95"
        },
        {
            "label": "2025-10-28_01-44-44",
            "content": "@@ -1809,1762 +1809,8 @@\n ux%0A%0A\n-    def writePage(self):%0A        if not self.hasGrafite():%0A            print(%22fail: nao existe grafite%22)%0A            return%0A        gastoPorFolha = self.__tip.usagePerSheet()%0A        tamanhoAtual = self.__tip.get_size()%0A        %0A        # 1. Verifica%C3%A7%C3%A3o de tamanho insuficiente para COME%C3%87AR (regra: %3E 10mm)%0A        # Se o tamanho atual %3C= 10, n%C3%A3o pode come%C3%A7ar.%0A        if tamanhoAtual %3C= 10:%0A             # Se for 0, removemos o grafite (embora a remo%C3%A7%C3%A3o seja feita ap%C3%B3s o gasto, %C3%A9 bom verificar)%0A            if tamanhoAtual == 0:%0A                 self.remove()%0A                 print(%22fail: nao existe grafite%22)%0A                 return%0A            %0A            # Se for %3E 0 e %3C= 10, emite o erro de tamanho insuficiente%0A            print(%22fail: tamanho insuficiente%22)%0A            return%0A%0A        # 2. Verifica%C3%A7%C3%A3o de folha incompleta (gasto completo vs. limite de 10mm)%0A        tamanho_final_se_completa = tamanhoAtual - gastoPorFolha%0A        %0A        if tamanho_final_se_completa %3C 10:%0A            # N%C3%A3o %C3%A9 poss%C3%ADvel terminar a folha sem ficar com tamanho %3C= 10%0A            %0A            # O grafite gasta apenas o que for poss%C3%ADvel (tamanho_atual - 10)%0A            gasto_efetivo = tamanhoAtual - 10%0A            self.__tip.decrease_size(gasto_efetivo)%0A            %0A            print(%22fail: folha incompleta%22)%0A            %0A            # Ap%C3%B3s o aviso, o grafite restante %C3%A9 de 10mm. Se a regra for que o grafite%0A            # s%C3%B3 %C3%A9 removido se o tamanho restante for 0 (como na regra anterior), %0A            # ele fica com 10mm. Se a regra for %22parar de escrever se %3C= 10mm%22,%0A            # ent%C3%A3o ele fica com 10mm.%0A            %0A            %0A        else:%0A            # 3. Gasto normal (tamanho final %3E 10mm)%0A            self.__tip.decrease_size(gastoPorFolha)%0A%0A\n     \n@@ -2541,76 +2541,8 @@\n ()%0A%0A\n-        elif args%5B0%5D == %22escrever%22:%0A            pencil.writePage()%0A%0A\n     \n",
            "lines": "100"
        },
        {
            "label": "2025-10-28_01-48-23",
            "content": "@@ -2037,238 +2037,649 @@\n     \n-if tamanhoAtual %3C= 10:%0A            if tamanhoAtual == 0:%0A                 self.remove()%0A                 print(%22fail: nao existe grafite%22)%0A                 return%0A            print(%22fail: tamanho insuficiente%22)%0A            return%0A\n+%0A        # 1. Verifica%C3%A7%C3%A3o de tamanho insuficiente para COME%C3%87AR (regra: %3E 10mm)%0A        # Se o tamanho atual %3C= 10, n%C3%A3o pode come%C3%A7ar.%0A        if tamanhoAtual %3C= 10:%0A             # Se for 0, removemos o grafite (embora a remo%C3%A7%C3%A3o seja feita ap%C3%B3s o gasto, %C3%A9 bom verificar)%0A            if tamanhoAtual == 0:%0A                 self.remove()%0A                 print(%22fail: nao existe grafite%22)%0A                 return%0A            %0A            # Se for %3E 0 e %3C= 10, emite o erro de tamanho insuficiente%0A            print(%22fail: tamanho insuficiente%22)%0A            return%0A%0A        # 2. Verifica%C3%A7%C3%A3o de folha incompleta (gasto completo vs. limite de 10mm)\n %0A   \n@@ -2690,21 +2690,34 @@\n  tamanho\n-F\n+_f\n inal\n+_se_completa\n  = taman\n@@ -2740,16 +2740,25 @@\n orFolha%0A\n+        %0A\n         \n@@ -2771,13 +2771,26 @@\n anho\n-F\n+_f\n inal\n+_se_completa\n  %3C 1\n@@ -2804,22 +2804,187 @@\n         \n-gastoE\n+# N%C3%A3o %C3%A9 poss%C3%ADvel terminar a folha sem ficar com tamanho %3C= 10%0A            %0A            # O grafite gasta apenas o que for poss%C3%ADvel (tamanho_atual - 10)%0A            gasto_e\n fetivo =\n@@ -3048,17 +3048,18 @@\n asto\n-E\n+_e\n fetivo)%0A\n     \n@@ -3054,16 +3054,29 @@\n fetivo)%0A\n+            %0A\n         \n@@ -3111,37 +3111,418 @@\n pleta%22)%0A        \n-else:\n+    %0A            # Ap%C3%B3s o aviso, o grafite restante %C3%A9 de 10mm. Se a regra for que o grafite%0A            # s%C3%B3 %C3%A9 removido se o tamanho restante for 0 (como na regra anterior), %0A            # ele fica com 10mm. Se a regra for %22parar de escrever se %3C= 10mm%22,%0A            # ent%C3%A3o ele fica com 10mm.%0A            %0A            %0A        else:%0A            # 3. Gasto normal (tamanho final %3E 10mm)\n %0A            sel\n@@ -3970,147 +3970,38 @@\n     \n-if len(args) == 2:%0A                pencil = Pencil(float(args%5B1%5D))%0A            else:%0A                print(%22comando iniciar requer calibre%22\n+pencil = Pencil(float(args%5B1%5D)\n )%0A%0A \n",
            "lines": "145"
        },
        {
            "label": "2025-10-28_01-51-42",
            "content": "@@ -1250,17 +1250,18 @@\n  def has\n-G\n+_g\n rafite(s\n",
            "lines": "128"
        },
        {
            "label": "2025-10-28_09-29-54",
            "content": "@@ -2051,19 +2051,59 @@\n tual %3C= \n+1\n 0:%0A\n+            if tamanhoAtual == 0:%0A     \n         \n@@ -2124,32 +2124,37 @@\n e()%0A            \n+ \n+    \n print(%22fail: nao\n@@ -2187,47 +2187,20 @@\n     \n+     \n return%0A\n-        if tamanhoAtual %3C= 10:%0A \n     \n@@ -2239,25 +2239,24 @@\n uficiente%22)%0A\n- \n             \n",
            "lines": "128"
        },
        {
            "label": "2025-10-28_09-35-28",
            "content": "@@ -218,24 +218,39 @@\n ersheet(self\n+, hardness: str\n ) -%3E int:%0A  \n",
            "lines": "128"
        },
        {
            "label": "2025-10-28_09-37-18",
            "content": "@@ -1847,17 +1847,16 @@\n afite():\n- \n %0A       \n@@ -1913,25 +1913,16 @@\n  return%0A\n-        %0A\n         \n@@ -1963,17 +1963,16 @@\n rSheet()\n- \n %0A       \n@@ -2005,25 +2005,24 @@\n .get_size()%0A\n-%0A\n         if t\n@@ -2134,109 +2134,8 @@\n urn%0A\n-%0A        tamanhoAposEscrita = tamanhoAtual - gastoPorFolha%0A%0A        if tamanhoAposEscrita %3C= 10:%0A    \n     \n@@ -2157,28 +2157,24 @@\n tual %3C= 10:%0A\n-    \n             \n@@ -2219,39 +2219,84 @@\n             \n-    \n return%0A\n+%0A\n     \n+    tamanhoFinal = tamanhoAtual - gastoPorFolha%0A\n         if t\n@@ -2305,30 +2305,20 @@\n anho\n-AposEscrita\n+Final\n  %3C 10:%0A\n-    \n     \n@@ -2362,36 +2362,32 @@\n  10%0A            \n-    \n self.__tip.decre\n@@ -2413,36 +2413,32 @@\n vo)%0A            \n-    \n print(%22fail: fol\n@@ -2457,103 +2457,8 @@\n a%22)%0A\n-            else:%0A                print(%22fail: tamanho insuficiente%22)%0A            return      %0A\n     \n",
            "lines": "128"
        },
        {
            "label": "2025-10-28_09-44-02",
            "content": "@@ -1235,18 +1235,17 @@\n  def has\n-_g\n+G\n rafite(s\n@@ -1841,10 +1841,9 @@\n .has\n-_g\n+G\n rafi\n",
            "lines": "135"
        },
        {
            "label": "2025-10-28_09-45-23",
            "content": "@@ -1226,71 +1226,8 @@\n ness\n-%0A    %0A    def get_size(self) -%3E int:%0A        return self.__size\n %0A%0A  \n",
            "lines": "135"
        },
        {
            "label": "2025-10-28_09-47-08",
            "content": "@@ -36,25 +36,26 @@\n f, thickness\n-:\n+ =\n  float, hard\n@@ -54,25 +54,26 @@\n at, hardness\n-:\n+ =\n  str, size: \n@@ -66,25 +66,26 @@\n  = str, size\n-:\n+ =\n  int):%0A     \n",
            "lines": "138"
        },
        {
            "label": "2025-10-28_09-49-58",
            "content": "@@ -506,37 +506,35 @@\n ckness(self) -%3E \n-float\n+str\n :%0A        return\n@@ -1968,32 +1968,41 @@\n          return%0A\n+        %0A\n         gastoPor\n@@ -2037,16 +2037,16 @@\n heet() %0A\n-\n         \n@@ -2078,24 +2078,25 @@\n .get_size()%0A\n+%0A\n         if t\n@@ -2196,32 +2196,33 @@\n          return%0A\n+%0A\n         tamanhoA\n@@ -2263,16 +2263,17 @@\n orFolha%0A\n+%0A\n         \n",
            "lines": "138"
        },
        {
            "label": "2025-10-28_09-52-06",
            "content": "@@ -637,17 +637,17 @@\n     def \n-g\n+s\n et_size(\n@@ -646,32 +646,39 @@\n et_size(self\n-) -%3E\n+, tamanho:\n  int\n+)\n :%0A        re\n@@ -671,31 +671,24 @@\n t):%0A        \n-return \n self.__size%0A\n@@ -682,24 +682,34 @@\n  self.__size\n+ = tamanho\n %0A%0A    def de\n@@ -1221,16 +1221,79 @@\n hickness\n+%0A    %0A    def get_size(self) -%3E int:%0A        return self.__size\n %0A%0A    de\n",
            "lines": "134"
        },
        {
            "label": "2025-10-28_09-52-50",
            "content": "@@ -1838,17 +1838,18 @@\n afite():\n+ \n %0A\n-\n         \n@@ -1944,25 +1944,25 @@\n tip.usagePer\n-s\n+S\n heet() %0A    \n@@ -2258,123 +2258,8 @@\n 0:%0A \n-               print(%22fail: tamanho insuficiente%22)%0A                return%0A            if tamanhoAposEscrita == 10:%0A\n     \n@@ -2302,24 +2302,25 @@\n uficiente%22)%0A\n+ \n             \n@@ -2522,24 +2522,90 @@\n pleta%22)%0A    \n+        else:%0A                print(%22fail: tamanho insuficiente%22)%0A\n             \n@@ -2602,32 +2602,38 @@\n           return\n+      \n %0A        else:%0A \n",
            "lines": "131"
        },
        {
            "label": "2025-10-28_09-54-02",
            "content": "@@ -3677,24 +3677,26 @@\n il: \n-comando invalido\n+nao existe grafite\n %22)%0A%0A\n",
            "lines": "132"
        },
        {
            "label": "2025-10-28_09-55-10",
            "content": "@@ -3673,34 +3673,32 @@\n (%22fail: \n-nao existe grafite\n+comando invalido\n %22)%0A%0Amain\n",
            "lines": "132"
        },
        {
            "label": "2025-10-28_09-55-22",
            "content": "@@ -3604,30 +3604,8 @@\n ver%22\n- or args%5B0%5D == %22write%22\n :%0A  \n",
            "lines": "132"
        },
        {
            "label": "2025-10-28_09-57-13",
            "content": "@@ -690,81 +690,8 @@\n size\n-%0A    %0A    def set_size(self, tamanho: int):%0A        self.__size = tamanho\n %0A%0A  \n",
            "lines": "132"
        },
        {
            "label": "2025-10-28_09-58-15",
            "content": "@@ -1973,37 +1973,24 @@\n      return%0A\n-            %0A\n         gast\n@@ -2074,25 +2074,16 @@\n _size()%0A\n-        %0A\n         \n@@ -2191,37 +2191,24 @@\n      return%0A\n-            %0A\n         tama\n@@ -2265,196 +2265,36 @@\n     \n-%0A        # Se ap%C3%B3s a escrita o tamanho for %3C= 10.%0A        if tamanhoAposEscrita %3C= 10:%0A            %0A            # Se o tamanhoAtual j%C3%A1 est%C3%A1 no limite %3C= 10 (e %C3%A9 %3E 0, pois j%C3%A1 checamos o 0).\n+if tamanhoAposEscrita %3C= 10:\n %0A   \n@@ -2400,17 +2400,16 @@\n  return%0A\n-%0A\n         \n@@ -2416,67 +2416,36 @@\n     \n-# CASO LIMITE: A escrita vai consumir e parar no limite 10.\n+if tamanhoAposEscrita == 10:\n %0A   \n@@ -2457,143 +2457,46 @@\n     \n-# Consome o necess%C3%A1rio para chegar a 10.%0A            gastoEfetivo = tamanhoAtual - 10%0A            self.__tip.decrease_size(gastoEfetivo\n+    print(%22fail: tamanho insuficiente%22\n )%0A  \n@@ -2509,102 +2509,18 @@\n     \n-%0A    \n     \n-    # Se o resultado %C3%A9 EXATAMENTE 10 (14-4=10), o teste espera %22tamanho insuficiente%22\n+return\n %0A   \n@@ -2542,34 +2542,33 @@\n anhoAposEscrita \n-==\n+%3C\n  10:%0A           \n@@ -2576,194 +2576,95 @@\n     \n-print(%22fail: tamanho insuficiente%22)%0A                return%0A            %0A            # Se o resultado %C3%A9 %3C 10, o teste espera %22folha incompleta%22%0A            else: # tamanhoAposEscrita %3C 10\n+gastoEfetivo = tamanhoAtual - 10%0A                self.__tip.decrease_size(gastoEfetivo)\n %0A   \n@@ -2735,70 +2735,8 @@\n urn%0A\n-        %0A        # Escrita Completa (tamanhoAposEscrita %3E 10)%0A\n     \n",
            "lines": "135"
        },
        {
            "label": "2025-10-28_10-01-09",
            "content": "@@ -2209,32 +2209,45 @@\n          return%0A\n+            %0A\n         tamanhoA\n@@ -2300,146 +2300,432 @@\n     \n-if tamanhoAposEscrita %3C= 10:%0A            if tamanhoAtual %3C= 10:%0A                print(%22fail: tamanho insuficiente%22)%0A                return\n+%0A        # Se ap%C3%B3s a escrita o tamanho for %3C= 10.%0A        if tamanhoAposEscrita %3C= 10:%0A            %0A            # Se o tamanhoAtual j%C3%A1 est%C3%A1 no limite %3C= 10 (e %C3%A9 %3E 0, pois j%C3%A1 checamos o 0).%0A            if tamanhoAtual %3C= 10:%0A                print(%22fail: tamanho insuficiente%22)%0A                return%0A%0A            # CASO LIMITE: A escrita vai consumir e parar no limite 10.%0A            # Consome o necess%C3%A1rio para chegar a 10.\n %0A   \n@@ -2817,16 +2817,123 @@\n fetivo)%0A\n+            %0A            # Se o resultado %C3%A9 EXATAMENTE 10 (14-4=10), o teste espera %22tamanho insuficiente%22%0A\n         \n@@ -3056,66 +3056,256 @@\n     \n-    print(%22fail: folha incompleta%22)%0A                return\n+%0A            # Se o resultado %C3%A9 %3C 10, o teste espera %22folha incompleta%22%0A            else: # tamanhoAposEscrita %3C 10%0A                print(%22fail: folha incompleta%22)%0A                return%0A        %0A        # Escrita Completa (tamanhoAposEscrita %3E 10)\n %0A   \n",
            "lines": "151"
        },
        {
            "label": "2025-10-28_10-51-07",
            "content": "class Grafite:\n    def __init__(self, thickness: float, hardness: str, size: int):\n        self.__thickness: float = thickness\n        self.__hardness: str = hardness\n        self.__size: int = size\n\n    def usagePersheet(self) -> int:\n        if self.__hardness == \"HB\":\n            return 1\n        if self.__hardness == \"2B\":\n            return 2\n        if self.__hardness == \"4B\":\n            return 4\n        if self.__hardness == \"6B\":\n            return 6\n        return 0\n        \n    def get_thickness(self) -> float:\n        return self.__thickness\n    \n    def get_hardness(self) -> str:\n        return self.__hardness\n    \n    def get_size(self) -> int:\n        return self.__size\n    \n    def set_size(self, tamanho: int):\n        self.__size = tamanho\n\n    def decrease_size(self, amount: int):\n        self.__size -= amount\n        if self.__size < 0:\n            self.__size = 0\n\n    def __str__(self) -> str:\n        return f\"[{self.__thickness}:{self.__hardness}:{self.__size}]\"\n    \nclass Pencil:\n    def __init__(self, thickness: float = 0, tip: Grafite | None = None):\n        self.__thickness = thickness\n        self.__tip = tip\n\n    def get_tip(self) -> Grafite | None:\n        return self.__tip\n\n    def get_thickness(self) -> float:\n        return self.__thickness\n\n    def has_grafite(self) -> bool:\n        return self.__tip is not None\n\n    def insert(self, tip: Grafite):\n        if self.__tip is not None:\n            print(\"fail: ja existe grafite\")\n            return\n        if tip.get_thickness() != self.__thickness:\n            print(\"fail: calibre incompativel\")\n            return\n        self.__tip = tip\n\n    def remove(self) -> Grafite | None:\n        if self.__tip is None:\n            print(\"fail: nao existe grafite\")\n            return None\n        aux = self.__tip\n        self.__tip = None\n        return aux\n\n    def writePage(self):\n        if not self.has_grafite():\n            print(\"fail: nao existe grafite\")\n            return\n            \n        gastoPorFolha = self.__tip.usagePersheet() \n        tamanhoAtual = self.__tip.get_size()\n        \n        if tamanhoAtual <= 0:\n            self.remove()\n            print(\"fail: nao existe grafite\")\n            return\n        tamanhoAposEscrita = tamanhoAtual - gastoPorFolha\n        if tamanhoAposEscrita <= 10:\n            if tamanhoAtual <= 10:\n                print(\"fail: tamanho insuficiente\")\n                return\n            gastoEfetivo = tamanhoAtual - 10\n            self.__tip.decrease_size(gastoEfetivo)\n            if tamanhoAposEscrita == 10:\n                print(\"fail: tamanho insuficiente\")\n                return\n                print(\"fail: folha incompleta\")\n                return\n        else:\n            self.__tip.decrease_size(gastoPorFolha)\n\n    def __str__(self) -> str:\n        return f\"calibre: {self.__thickness}, grafite: {self.__tip if self.__tip else 'null'}\"\n\n\ndef main():\n    pencil = Pencil()\n\n    while True:\n        line = input()\n        print(\"$\" + line)\n        args = line.split()\n\n        if args[0] == \"end\":\n            break\n\n        elif args[0] == \"show\":\n            print(pencil)\n\n        elif args[0] == \"init\":\n            if len(args) == 2:\n                pencil = Pencil(float(args[1]))\n            else:\n                print(\"comando iniciar requer calibre\")\n\n        elif args[0] == \"insert\":\n            thickness = float(args[1])\n            hardness = args[2]\n            size = int(args[3])\n            grafite = Grafite(thickness, hardness, size)\n            pencil.insert(grafite)\n\n        elif args[0] == \"remove\":\n            pencil.remove()\n\n        elif args[0] == \"escrever\" or args[0] == \"write\":\n            pencil.writePage()\n\n        else:\n            print(\"fail: nao existe grafite\")\n\nmain()",
            "lines": "136"
        }
    ]
}