{
    "patches": [
        {
            "label": "2025-10-28_10-08-10",
            "content": "@@ -5,3029 +5,6207 @@\n s Pe\n-rson:%0A    def __init__(self, name: str, money: int):%0A        self.__name = name%0A        self.__money = money%0A%0A    def get_name(self):%0A        return self.__name%0A%0A    def get_money(self):%0A        return self.__money%0A%0A    def set_money(self, value: int):%0A        self.__money = value%0A%0A    def pay(self, value: int) -%3E int:%0A        %22%22%22Tenta pagar o valor; se n%C3%A3o tiver dinheiro suficiente, paga o que puder.%22%22%22%0A        paid = min(self.__money, value)%0A        self.__money -= paid%0A        return paid%0A%0A    def __str__(self):%0A        return f%22%7Bself.__name%7D:%7Bself.__money%7D%22%0A%0A%0Aclass Moto:%0A    def __init__(self):%0A        self.__cost = 0%0A        self.__driver = None%0A        self.__passenger = None%0A%0A    def set_driver(self, person: Person):%0A        self.__driver = person%0A%0A    def set_passenger(self, person: Person):%0A        self.__passenger = person%0A%0A    def drive(self, km: int):%0A        if self.__driver is None:%0A            print(%22fail: no driver%22)%0A            return%0A        if self.__passenger is None:%0A            print(%22fail: no passenger%22)%0A            return%0A        if km %3C= 0:%0A            print(%22fail: invalid distance%22)%0A            return%0A        self.__cost += km%0A%0A    def leave_passenger(self):%0A        if self.__passenger is None:%0A            print(%22fail: no passenger%22)%0A            return%0A%0A        passenger = self.__passenger%0A        driver = self.__driver%0A        cost = self.__cost%0A%0A        if passenger.get_money() %3C cost:%0A            print(%22fail: Passenger does not have enough money%22)%0A%0A        paid = passenger.pay(cost)%0A        driver.set_money(driver.get_money() + cost)%0A        print(f%22%7Bpassenger.get_name()%7D:%7Bpassenger.get_money()%7D left%22)%0A%0A        # Reset corrida%0A        self.__cost = 0%0A        self.__passenger = None%0A%0A    def show(self):%0A        driver = str(self.__driver) if self.__driver else %22None%22%0A        passenger = str(self.__passenger) if self.__passenger else %22None%22%0A        print(f%22Cost: %7Bself.__cost%7D, Driver: %7Bdriver%7D, Passenger: %7Bpassenger%7D%22)%0A%0A%0Adef main():%0A    moto = Moto()%0A    while True:%0A        try:%0A            line = input().strip()%0A            if not line:%0A                continue%0A            if line == %22$end%22:%0A                break%0A%0A            parts = line.split()%0A            cmd = parts%5B0%5D%0A%0A            if cmd == %22$show%22:%0A                moto.show()%0A%0A            elif cmd == %22$setDriver%22:%0A                name = parts%5B1%5D%0A                money = int(parts%5B2%5D)%0A                driver = Person(name, money)%0A                moto.set_driver(driver)%0A%0A            elif cmd == %22$setPass%22:%0A                name = parts%5B1%5D%0A                money = int(parts%5B2%5D)%0A                passenger = Person(name, money)%0A                moto.set_passenger(passenger)%0A%0A            elif cmd == %22$drive%22:%0A                km = int(parts%5B1%5D)%0A                moto.drive(km)%0A%0A            elif cmd == %22$leavePass%22:%0A                moto.leave_passenger()%0A%0A            else:%0A                print(%22fail: comando inv%C3%A1lido%22)%0A%0A        except EOFError:%0A            break%0A%0A%0Aif __name__ == %22__main__%22:%0A    main()%0A\n+ssoa:%0A    %22%22%22%0A    Representa uma pessoa com nome e dinheiro.%0A    Motorista e Passageiro s%C3%A3o inst%C3%A2ncias desta classe.%0A    %22%22%22%0A    def __init__(self, nome: str, dinheiro: float):%0A        self.__nome = nome%0A        self.__dinheiro = dinheiro%0A        %0A    def get_nome(self) -%3E str:%0A        return self.__nome%0A    %0A    def get_dinheiro(self) -%3E float:%0A        return self.__dinheiro%0A    %0A    def set_dinheiro(self, valor: float):%0A        self.__dinheiro = valor%0A    %0A    def transferir_dinheiro(self, destinatario: 'Pessoa', valor: float) -%3E float:%0A        %22%22%22%0A        Tenta transferir um valor para outra Pessoa.%0A        Retorna o valor efetivamente pago (o que a pessoa tinha).%0A        %22%22%22%0A        if valor %3C= 0:%0A            return 0.0%0A%0A        valor_efetivo = min(self.__dinheiro, valor)%0A        %0A        # Diminui o dinheiro da pessoa%0A        self.__dinheiro -= valor_efetivo%0A        %0A        # Aumenta o dinheiro do destinat%C3%A1rio (a Moto far%C3%A1 isso)%0A        # %C3%89 responsabilidade da Moto/Uber completar o valor%0A        %0A        return valor_efetivo%0A%0A    def __str__(self) -%3E str:%0A        return f%22Nome: %7Bself.__nome%7D, Dinheiro: R$%7Bself.__dinheiro:.2f%7D%22%0A%0A%0Aclass Moto:%0A    %22%22%22%0A    Gerencia uma moto de corrida com motorista, passageiro e custo.%0A    %22%22%22%0A    def __init__(self, motorista: Pessoa %7C None = None):%0A        self.__motorista: Pessoa %7C None = motorista%0A        self.__passageiro: Pessoa %7C None = None%0A        self.__custo: float = 0.0%0A        %0A    def get_custo(self) -%3E float:%0A        return self.__custo%0A    %0A    def get_motorista(self) -%3E Pessoa %7C None:%0A        return self.__motorista%0A        %0A    def get_passageiro(self) -%3E Pessoa %7C None:%0A        return self.__passageiro%0A%0A    def embarcar(self, passageiro: Pessoa):%0A        %22%22%22%0A        Embarca um passageiro e inicia a corrida (custo = 0).%0A        %22%22%22%0A        if self.__passageiro is not None:%0A            print(%22fail: Ja existe um passageiro na moto.%22)%0A            return%0A        %0A        if self.__motorista is None:%0A            print(%22fail: Nao ha motorista para iniciar a corrida.%22)%0A            return%0A            %0A        self.__passageiro = passageiro%0A        self.__custo = 0.0 # Come%C3%A7a a contagem do custo%0A        print(f%22ok: %7Bpassageiro.get_nome()%7D embarcou. Corrida iniciada.%22)%0A%0A    def percorrer(self, km: float):%0A        %22%22%22%0A        Aumenta o custo da corrida em R$ 1.00 por km.%0A        %22%22%22%0A        if self.__passageiro is None:%0A            print(%22fail: Nao ha passageiro para percorrer.%22)%0A            return%0A%0A        if km %3C 0:%0A            print(%22fail: Distancia invalida.%22)%0A            return%0A            %0A        self.__custo += km * 1.00%0A        print(f%22ok: Percorreu %7Bkm:.2f%7D km. Novo custo: R$%7Bself.__custo:.2f%7D%22)%0A%0A    def desembarcar(self) -%3E Pessoa %7C None:%0A        %22%22%22%0A        Finaliza a corrida, o passageiro paga o motorista e desembarca.%0A        O motorista sempre recebe o valor completo da corrida.%0A        %22%22%22%0A        if self.__passageiro is None:%0A            print(%22fail: Nao ha passageiro para desembarcar.%22)%0A            return None%0A        %0A        if self.__motorista is None:%0A            # Isso nao deve acontecer se o motorista e o passageiro existem%0A            print(%22fail: Nao ha motorista para receber o pagamento.%22)%0A            return None%0A%0A        passageiro_pagador = self.__passageiro%0A        valor_corrida = self.__custo%0A        %0A        # 1. Passageiro paga o que pode%0A        valor_pago = passageiro_pagador.transferir_dinheiro(self.__motorista, valor_corrida)%0A        %0A        # 2. O motorista recebe o valor completo (Uber paga o que falta)%0A        valor_faltante = valor_corrida - valor_pago%0A        %0A        motorista_atual_dinheiro = self.__motorista.get_dinheiro()%0A        self.__motorista.set_dinheiro(motorista_atual_dinheiro + valor_corrida)%0A        %0A        # 3. Finaliza a corrida e atualiza o estado da moto%0A        self.__passageiro = None%0A        self.__custo = 0.0%0A        %0A        if valor_faltante %3E 0:%0A            print(f%22ok: %7Bpassageiro_pagador.get_nome()%7D pagou R$%7Bvalor_pago:.2f%7D. %22%0A                  f%22O motorista %7Bself.__motorista.get_nome()%7D recebeu R$%7Bvalor_corrida:.2f%7D (Uber cobriu R$%7Bvalor_faltante:.2f%7D).%22)%0A        else:%0A            print(f%22ok: %7Bpassageiro_pagador.get_nome()%7D pagou R$%7Bvalor_corrida:.2f%7D. %22%0A                  f%22Corrida finalizada. Motorista: R$%7Bself.__motorista.get_dinheiro():.2f%7D%22)%0A        %0A        return passageiro_pagador%0A%0A    def __str__(self) -%3E str:%0A        motorista_nome = self.__motorista.get_nome() if self.__motorista else %22null%22%0A        passageiro_nome = self.__passageiro.get_nome() if self.__passageiro else %22null%22%0A        return f%22Moto %5BMotorista: %7Bmotorista_nome%7D, Passageiro: %7Bpassageiro_nome%7D, Custo: R$%7Bself.__custo:.2f%7D%5D%22%0A%0A# ----------------------------------------------------------------------%0A# EXEMPLO DE USO%0A# ----------------------------------------------------------------------%0A%0A# Criando Pessoas%0Amotorista = Pessoa(%22Jo%C3%A3o%22, 50.0)%0Apassageiro_rico = Pessoa(%22Maria%22, 100.0)%0Apassageiro_pobre = Pessoa(%22Pedro%22, 5.0)%0A%0A# Criando a Moto%0Amoto = Moto(motorista)%0A%0Aprint(%22--- Cen%C3%A1rio 1: Corrida Normal ---%22)%0Aprint(moto)%0A%0Amoto.embarcar(passageiro_rico)%0Amoto.percorrer(10.5) # Custo: R$ 10.50%0Aprint(moto)%0Aprint(f%22Dinheiro antes: Motorista R$%7Bmotorista.get_dinheiro():.2f%7D, Passageiro R$%7Bpassageiro_rico.get_dinheiro():.2f%7D%22)%0A%0Amoto.desembarcar()%0A%0Aprint(moto)%0Aprint(f%22Dinheiro depois: Motorista R$%7Bmotorista.get_dinheiro():.2f%7D, Passageiro R$%7Bpassageiro_rico.get_dinheiro():.2f%7D%22)%0Aprint(%22-%22 * 30)%0A%0A# --- Cen%C3%A1rio 2: Passageiro sem dinheiro ---%0A%0Amoto.embarcar(passageiro_pobre)%0Amoto.percorrer(15.0) # Custo: R$ 15.00%0A%0Aprint(f%22Dinheiro antes: Motorista R$%7Bmotorista.get_dinheiro():.2f%7D, Passageiro R$%7Bpassageiro_pobre.get_dinheiro():.2f%7D%22)%0A%0Amoto.desembarcar()%0A%0A# Motorista recebeu R$ 15.00. Passageiro pagou R$ 5.00 (tudo que tinha).%0A# Uber completou R$ 10.00.%0Aprint(f%22Dinheiro depois: Motorista R$%7Bmotorista.get_dinheiro():.2f%7D, Passageiro R$%7Bpassageiro_pobre.get_dinheiro():.2f%7D%22)%0Aprint(%22-%22 * 30)%0A%0A# --- Cen%C3%A1rio 3: Falhas ---%0Amoto_sem_motorista = Moto(None)%0Amoto_sem_motorista.embarcar(passageiro_rico) # Falha: Nao ha motorista%0Amoto.embarcar(passageiro_rico) # Falha: Ja existe um passageiro%0Amoto.percorrer(5.0) # Falha: Nao ha passageiro\n",
            "lines": "178"
        },
        {
            "label": "2025-10-28_10-38-00",
            "content": "@@ -2029,16 +2029,33 @@\n e True:%0A\n+        try:%0A    \n         \n@@ -2068,16 +2068,24 @@\n  input()\n+.strip()\n %0A       \n@@ -2089,25 +2089,24 @@\n     \n-print(%22$%22 +\n+    if not\n  line\n-)\n+:\n %0A   \n@@ -2114,52 +2114,50 @@\n     \n-args = line.split()%0A%0A        if args%5B0%5D\n+        continue%0A            if line\n  == %22\n+$\n end%22\n@@ -2170,16 +2170,20 @@\n         \n+    \n break%0A%0A \n@@ -2189,33 +2189,93 @@\n         \n-elif arg\n+    parts = line.split()%0A            cmd = part\n s%5B0%5D\n+%0A%0A            if cmd\n  == %22\n+$\n show%22:%0A \n@@ -2289,22 +2289,29 @@\n     \n-print(moto)%0A%0A%0A\n+    moto.show()%0A%0A    \n     \n@@ -2311,39 +2311,35 @@\n            elif \n-args%5B0%5D\n+cmd\n  == %22$setDriver%22\n@@ -2348,34 +2348,39 @@\n             \n+    \n name = \n+p\n ar\n-g\n+t\n s%5B1%5D%0A       \n@@ -2376,32 +2376,36 @@\n %5B1%5D%0A            \n+    \n money = int(args\n@@ -2396,33 +2396,38 @@\n money = int(\n+p\n ar\n-g\n+t\n s%5B2%5D)%0A\n+    \n             \n@@ -2459,32 +2459,36 @@\n ey)%0A            \n+    \n moto.set_driver(\n@@ -2500,36 +2500,36 @@\n r)%0A%0A        \n+    \n elif \n-args%5B0%5D\n+cmd\n  == %22$setPas\n@@ -2548,23 +2548,32 @@\n     \n+    \n name = \n+p\n ar\n-g\n+t\n s%5B1%5D%0A\n+    \n     \n@@ -2596,17 +2596,22 @@\n int(\n+p\n ar\n-g\n+t\n s%5B2%5D)%0A\n+    \n     \n@@ -2654,32 +2654,36 @@\n ey)%0A            \n+    \n moto.set_passeng\n@@ -2701,36 +2701,36 @@\n r)%0A%0A        \n+    \n elif \n-args%5B0%5D\n+cmd\n  == %22$drive%22\n@@ -2731,16 +2731,20 @@\n drive%22:%0A\n+    \n         \n@@ -2756,19 +2756,20 @@\n m = int(\n+p\n ar\n-g\n+t\n s%5B1%5D)%0A  \n@@ -2774,24 +2774,28 @@\n             \n+    \n moto.drive(k\n@@ -2810,20 +2810,20 @@\n     \n+    \n elif \n-args%5B0%5D\n+cmd\n  == \n@@ -2832,24 +2832,28 @@\n leavePass%22:%0A\n+    \n             \n@@ -2872,24 +2872,28 @@\n assenger()%0A%0A\n+    \n         else\n@@ -2898,32 +2898,36 @@\n se:%0A            \n+    \n print(%22fail: com\n@@ -2947,11 +2947,87 @@\n %22)%0A%0A\n-%0A\n+        except EOFError:%0A            break%0A%0A%0Aif __name__ == %22__main__%22:%0A    \n main()\n+%0A\n",
            "lines": "118"
        },
        {
            "label": "2025-10-28_10-41-42",
            "content": "@@ -1986,251 +1986,8 @@\n %22)%0A%0A\n-    def __str__(self):%0A        driver = str(self.__driver) if self.__driver else %22None%22%0A        passenger = str(self.__passenger) if self.__passenger else %22None%22%0A        return f%22Cost: %7Bself.__cost%7D, Driver: %7Bdriver%7D, Passenger: %7Bpassenger%7D%22%0A%0A\n %0Adef\n",
            "lines": "112"
        },
        {
            "label": "2025-10-28_10-45-02",
            "content": "@@ -2345,24 +2345,25 @@\n ine.split()%0A\n+%0A\n         if a\n@@ -2397,16 +2397,17 @@\n   break%0A\n+%0A\n         \n@@ -2454,16 +2454,18 @@\n t(moto)%0A\n+%0A%0A\n         \n@@ -2481,16 +2481,17 @@\n %5B0%5D == %22\n+$\n setDrive\n@@ -2657,16 +2657,17 @@\n %5B0%5D == %22\n+$\n setPass%22\n@@ -2840,16 +2840,17 @@\n %5B0%5D == %22\n+$\n drive%22:%0A\n@@ -2907,16 +2907,16 @@\n ve(km)%0A%0A\n-\n         \n@@ -2932,16 +2932,17 @@\n %5B0%5D == %22\n+$\n leavePas\n",
            "lines": "117"
        },
        {
            "label": "2025-10-28_10-46-43",
            "content": "@@ -322,16 +322,103 @@\n -%3E int:%0A\n+        %22%22%22Tenta pagar o valor; se n%C3%A3o tiver dinheiro suficiente, paga o que puder.%22%22%22%0A\n         \n@@ -449,16 +449,16 @@\n  value)%0A\n-\n         \n@@ -1292,32 +1292,33 @@\n          return%0A\n+%0A\n         passenge\n@@ -1396,16 +1396,17 @@\n .__cost%0A\n+%0A\n         \n@@ -1502,16 +1502,17 @@\n money%22)%0A\n+%0A\n         \n@@ -1659,16 +1659,41 @@\n %7D left%22)\n+%0A%0A        # Reset corrida\n %0A       \n@@ -2622,24 +2622,25 @@\n ver(driver)%0A\n+%0A\n         elif\n@@ -2808,16 +2808,17 @@\n senger)%0A\n+%0A\n         \n@@ -2899,16 +2899,17 @@\n ive(km)%0A\n+%0A\n         \n@@ -2972,16 +2972,17 @@\n enger()%0A\n+%0A\n         \n@@ -2987,16 +2987,16 @@\n   else:%0A\n-\n         \n@@ -3032,14 +3032,15 @@\n lido%22)%0A%0A\n+%0A\n main()\n",
            "lines": "113"
        },
        {
            "label": "2025-10-28_10-50-04",
            "content": "class Person:\n    def __init__(self, name: str, money: int):\n        self.__name = name\n        self.__money = money\n\n    def get_name(self):\n        return self.__name\n\n    def get_money(self):\n        return self.__money\n\n    def set_money(self, value: int):\n        self.__money = value\n\n    def pay(self, value: int) -> int:\n        paid = min(self.__money, value)\n        self.__money -= paid\n        return paid\n\n    def __str__(self):\n        return f\"{self.__name}:{self.__money}\"\n\n\nclass Moto:\n    def __init__(self):\n        self.__cost = 0\n        self.__driver = None\n        self.__passenger = None\n\n    def set_driver(self, person: Person):\n        self.__driver = person\n\n    def set_passenger(self, person: Person):\n        self.__passenger = person\n\n    def drive(self, km: int):\n        if self.__driver is None:\n            print(\"fail: no driver\")\n            return\n        if self.__passenger is None:\n            print(\"fail: no passenger\")\n            return\n        if km <= 0:\n            print(\"fail: invalid distance\")\n            return\n        self.__cost += km\n\n    def leave_passenger(self):\n        if self.__passenger is None:\n            print(\"fail: no passenger\")\n            return\n        passenger = self.__passenger\n        driver = self.__driver\n        cost = self.__cost\n        if passenger.get_money() < cost:\n            print(\"fail: Passenger does not have enough money\")\n        paid = passenger.pay(cost)\n        driver.set_money(driver.get_money() + cost)\n        print(f\"{passenger.get_name()}:{passenger.get_money()} left\")\n        self.__cost = 0\n        self.__passenger = None\n\n    def show(self):\n        driver = str(self.__driver) if self.__driver else \"None\"\n        passenger = str(self.__passenger) if self.__passenger else \"None\"\n        print(f\"Cost: {self.__cost}, Driver: {driver}, Passenger: {passenger}\")\n\n    def __str__(self):\n        driver = str(self.__driver) if self.__driver else \"None\"\n        passenger = str(self.__passenger) if self.__passenger else \"None\"\n        return f\"Cost: {self.__cost}, Driver: {driver}, Passenger: {passenger}\"\n\n\ndef main():\n    moto = Moto()\n    while True:\n        line = input()\n        print(\"$\" + line)\n        args = line.split()\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"show\":\n            print(moto)\n        elif args[0] == \"setDriver\":\n            name = args[1]\n            money = int(args[2])\n            driver = Person(name, money)\n            moto.set_driver(driver)\n        elif args[0] == \"setPass\":\n            name = args[1]\n            money = int(args[2])\n            passenger = Person(name, money)\n            moto.set_passenger(passenger)\n        elif args[0] == \"drive\":\n            km = int(args[1])\n            moto.drive(km)\n        elif args[0] == \"leavePass\":\n            moto.leave_passenger()\n        else:\n            print(\"fail: comando inv\u00e1lido\")\n\nmain()",
            "lines": "102"
        }
    ]
}